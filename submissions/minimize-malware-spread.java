class Solution {
    private class Dus {
        private int parent[];
        private int count[];
        Dus(int[][] graph) {
            parent = new int[graph.length];
            count = new int[graph.length];
            for (int i = 0; i < graph.length; i++) {
                parent[i] = i;
                count[i] = 1;
            }
            for (int i = 1; i < graph.length; i++) {
                for (int j = 0; j < i; j++) {
                    if (graph[i][j] == 1) {
                        union(i, j);
                    }
                }
            }
        }

        public int find(int i) {
            if (parent[i] == i) return i;
            parent[i] = find(parent[i]);
            return parent[i];
        }

        public void union(int i, int j) {
            int rI = find(i);
            int rJ = find(j);
            if (rI < rJ) {
                parent[j] = rI;
                count[rI]++;
                count[i] = count[rI];
                count[j] = count[rI];
            }
            if (rJ < rI) {
                parent[i] = rJ;
                count[rJ]++;
                count[i] = count[rJ];
                count[j] = count[rJ];
            }
        }

        public int count(int i) {
            return count[find(i)];
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        Dus dus = new Dus(graph);
        Map<Integer, Integer> map = new HashMap();
        for (int i = 0; i <initial.length; i++) {
            int key = dus.find(initial[i]);
            map.put(key, map.getOrDefault(key, 0) + 1);
        }
        List<Integer> list = Arrays.stream(initial).boxed().collect(Collectors.toList());
        Collections.sort(list, new Comparator<Integer>() {
            @Override
            public int compare(Integer i, Integer j) {
                int pi = dus.find(i), pj = dus.find(j);
                if (map.get(pi) != map.get(pj)) return (map.get(pi) - map.get(pj));
                if (dus.count(i) != dus.count(j)) return (dus.count(j) - dus.count(i));
                return (i - j);
            }
        });
        return list.get(0);
    }
}